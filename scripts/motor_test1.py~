#!/usr/bin/env python
import rospy
from std_msgs.msg import Int16
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist

# Base on the joystick code by Author: Andrew Dai but converted for my purpose
# This ROS Node converts Joystick inputs from the joy node
# into commands for the motors

# Receives joystick messages (subscribed to Joy topic) then converts that to 
# Int16 messages to the topics for: left_motor_effort and right_motor_effort.
# Then will take the value passed in by the joystick left thumbstick up and down (index 1) and 
# and the value passed in by the joystick right thumbstick left and right (index 2) and 
# shift the values right by 7. Doing this because the numbers coming in are 16 bit signed and 
# the desired output is an 9 bit signed number. The output to the motor is actually an 8 bit 
# unsigned number but I am using the nineth bit for the desired direction and converting 
# it on the Mega. Shifting the number to the left effectively spreads the value over the integer 
# range -255 to +255. 
def callback(data):
    twist = Twist()
    # vertical left stick axis = linear rate
    twist.linear.x = 4*data.axes[1]
    # horizontal right stick axis = turn rate
    twist.angular.z = 4*data.axes[2]
    pub.publish(twist)

# Intializes everything
def start():
    # publishing to "turtle1/cmd_vel" to control turtle1
    global pub
    pub = rospy.Publisher('turtle1/cmd_vel', Twist, queue_size=10)
    # subscribed to joystick inputs on topic "joy"
    rospy.Subscriber("joy", Joy, callback)
    # starts the node 
    rospy.init_node('Joy2Turtle')
    rospy.spin()

if __name__ == '__main__':
    start()

